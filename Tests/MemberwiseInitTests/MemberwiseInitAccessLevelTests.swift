// This file is automatically generated by '../../bin/generate_access_level_tests.sh'.
// Do not edit this file directly.

import MacroTesting
import MemberwiseInitMacros
import SwiftSyntaxMacros
import XCTest

final class MemberwiseInitAccessLevelTests: XCTestCase {
  override func invokeTest() {
    // NB: Waiting for swift-macro-testing PR to support explicit indentationWidth: https://github.com/pointfreeco/swift-macro-testing/pull/8
    withMacroTesting(
      //indentationWidth: .spaces(2),
      //isRecording: true,
      macros: [
        "MemberwiseInit": MemberwiseInitMacro.self,
        "Init": InitMacro.self,
      ]
    ) {
      super.invokeTest()
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PrivateStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      private struct S {
      }
      """
    } expansion: {
      """
      private struct S {

          private init() {
          }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_DefaultStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      struct S {
      }
      """
    } expansion: {
      """
      struct S {

          private init() {
          }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        private init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPrivate_PublicStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.private)
      public struct S {
      }
      """
    } expansion: {
      """
      public struct S {

          private init() {
          }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      private struct S {
        private let v: T
        ┬──────
        ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
           ✏️ Add '@Init(.internal)'
           ✏️ Replace 'private' access with 'internal'
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      private struct S {
        @Init(.private) private let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      private struct S {
        let v: T
        ┬───────
        ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
           ✏️ Add '@Init(.internal)'
           ✏️ Add 'internal' access level
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      private struct S {
        @Init(.private) let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      private struct S {
        @Init(.private) public let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PrivateStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      private struct S {
      }
      """
    } expansion: {
      """
      private struct S {

          internal init() {
          }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      struct S {
        private let v: T
        ┬──────
        ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
           ✏️ Add '@Init(.internal)'
           ✏️ Replace 'private' access with 'internal'
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      struct S {
        @Init(.private) private let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      struct S {
        @Init(.private) let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      struct S {
        @Init(.private) public let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_DefaultStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      struct S {
      }
      """
    } expansion: {
      """
      struct S {

          internal init() {
          }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      public struct S {
        private let v: T
        ┬──────
        ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
           ✏️ Add '@Init(.internal)'
           ✏️ Replace 'private' access with 'internal'
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      public struct S {
        @Init(.private) private let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      public struct S {
        @Init(.private) let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        internal init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit
      public struct S {
        @Init(.private) public let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.internal) would leak access to 'private' property
                 ✏️ Add '@Init(.internal)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        internal init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitDefault_PublicStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit
      public struct S {
      }
      """
    } expansion: {
      """
      public struct S {

          internal init() {
          }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      private struct S {
        private let v: T
        ┬──────
        ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
           ✏️ Add '@Init(.public)'
           ✏️ Replace 'private' access with 'public'
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.private) private let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.internal) private let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        private let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      private struct S {
        let v: T
        ┬───────
        ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
           ✏️ Add '@Init(.public)'
           ✏️ Add 'public' access level
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.private) let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.internal) let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.private) public let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.internal) public let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      private struct S {
        public let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PrivateStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      private struct S {
      }
      """
    } expansion: {
      """
      private struct S {

          public init() {
          }
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      struct S {
        private let v: T
        ┬──────
        ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
           ✏️ Add '@Init(.public)'
           ✏️ Replace 'private' access with 'public'
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.private) private let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.internal) private let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      struct S {
        private let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      struct S {
        let v: T
        ┬───────
        ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
           ✏️ Add '@Init(.public)'
           ✏️ Add 'public' access level
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.private) let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.internal) let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      struct S {
        let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.private) public let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.internal) public let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      struct S {
        public let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_DefaultStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      struct S {
      }
      """
    } expansion: {
      """
      struct S {

          public init() {
          }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      public struct S {
        private let v: T
        ┬──────
        ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
           ✏️ Add '@Init(.public)'
           ✏️ Replace 'private' access with 'public'
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitPrivate_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.private) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.private) private let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitInternal_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.internal) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.internal) private let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitPublic_PrivateProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.public) private let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        private let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      public struct S {
        let v: T
        ┬───────
        ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
           ✏️ Add '@Init(.public)'
           ✏️ Add 'public' access level
           ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitPrivate_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.private) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.private) let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitInternal_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.internal) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.internal) let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitPublic_DefaultProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.public) let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitPrivate_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.private) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.private) public let v: T
              ┬───────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'private' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitInternal_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.internal) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        public init() {
        }
      }
      """
    } diagnostics: {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.internal) public let v: T
              ┬────────
              ╰─ 🛑 @MemberwiseInit(.public) would leak access to 'internal' property
                 ✏️ Add '@Init(.public)'
                 ✏️ Add '@Init(.ignore)' and an initializer
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_InitPublic_PublicProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
        @Init(.public) public let v: T
      }
      """
    } expansion: {
      """
      public struct S {
        public let v: T

        public init(
          v: T
        ) {
          self.v = v
        }
      }
      """
    }
  }

  func testMemberwiseInitPublic_PublicStruct_NoProperty() {
    assertMacro(applyFixIts: false) {
      """
      @MemberwiseInit(.public)
      public struct S {
      }
      """
    } expansion: {
      """
      public struct S {

          public init() {
          }
      }
      """
    }
  }

}
